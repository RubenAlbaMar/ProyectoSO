#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdio.h>
#include <pthread.h>
#include <mysql.h>

//INICIALIZAMOS EL ACCESO EXCLUYENTE
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

typedef struct {
	char nombre[20];
	int socket;
}TConectado;

typedef struct {
	TConectado conectados [100];
	int num;
}TListaConectados;

TListaConectados listaconectados;
//int socket=0;


void SignIn(char username[20], char name[20], char surname[20], char email[20], char password[20], MYSQL *conn) // A\ufff1ADE UN JUGADOR A LA TABLA JUGADORES DE LA BASE DE DATOS
{
	char consulta[200];
	strcpy (consulta,"INSERT INTO Player VALUES ('");
	strcat (consulta, username);
	strcat (consulta,"','");
	strcat (consulta, name);
	strcat (consulta,"','");
	strcat (consulta, surname);
	strcat (consulta,"','");
	strcat (consulta, email);
	strcat (consulta,"','");
	strcat (consulta, password);
	strcat (consulta,"',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);");
	int err;
	err=mysql_query (conn, consulta);
	if (err!=0) 
	{
		printf ("Error al introducir datos en la base %u %s\n", mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
}


int LogIn( char username[20], char password[20],MYSQL *conn) // BUSCA A UN JUGADOR DE LA BASE DE DATOS PARA VER SI ES UN USUARIO EXISTENTE
{
	MYSQL_RES *resultado;
	MYSQL_ROW row;
	
	int exists=0;
	/*	char username[20];*/
	/*	char password[20];*/
	char mypassword[20];
	char consulta[80];
	strcpy (consulta,"SELECT Player.pass FROM Player WHERE Player.username = '");
	strcat (consulta, username);
	strcat (consulta,"';");
	int err;
	err=mysql_query (conn, consulta);
	if (err!=0) {
		printf ("Error al consultar datos de la base %u %s\n",
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	
	resultado = mysql_store_result (conn);
	
	row = mysql_fetch_row (resultado);
	
	if (row == NULL)
		printf ("No se han obtenido datos en la consulta\n");
	
	if (strcmp(password,row[0])==0)
	{
		exists =1;	
	}
	/*	printf ("exists es igual a %i\n", exists);*/
	return exists;
	
}


void PORCENTAJE_PREGUNTAS_PARTIDAS(int idGame, MYSQL *conn, int *sock_conn) // A PARTIR DE EL NUMERO DE PARTIDA, OBTENEMOS EL PORCENTAJE DE PREGUNTAS DE CADA TEMA
{
	printf ("8a prueba\n");
	MYSQL_RES *resultado;
	MYSQL_ROW row;
	int err;
	//Declaro las variables que necesitare
	int numPreguntaPartidaIX;
	int numPreguntaPartidaAERO;
	int numPreguntaPartidaMET;
	int numPreguntaPartidaSO;
	int numPreguntaPartidaCA1;
	int numPreguntaPartidaERM;
	int totalPreguntas;
	
	int PercentageIX;
	int PercentageAERO;
	int PercentageMET;
	int PercentageSO;
	int PercentageCA1;
	int PercentageERM;
	printf ("9a prueba\n");
	char answer[512];
	/*answer = malloc(sizeof(char*)*5000);*/
	char answer2[512];
	/*answer2 = malloc(sizeof(char)*100);*/
	char idgame[20];
	
	printf ("10a prueba\n");
	sprintf(idgame, "%d", idGame);
	// Pregunto el identificador de partida
	/*strcpy (idgame, sidGame);*/ 
	printf ("11a prueba\n");
	char consulta [80];
	strcpy (consulta,"SELECT Game.numGameQuestIX, Game.numGameQuestAERO, Game.numGameQuestMET, Game.numGameQuestSO, Game.numGameQuestCA1, Game.numGameQuestERM  FROM Game WHERE Game.id = '");
	strcat (consulta, idgame);
	strcat (consulta,"';");
	printf ("12a prueba\n");
	err=mysql_query (conn, consulta);
	if (err!=0) {
		printf ("Error al consultar datos de la base %u %s\n",
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	printf ("13a prueba\n");
	resultado = mysql_store_result (conn);
	
	row = mysql_fetch_row (resultado);
	
	printf ("14a prueba\n");
	if (row != NULL)
	{
		numPreguntaPartidaIX= atoi (row[0]);
		numPreguntaPartidaAERO= atoi (row[1]);
		numPreguntaPartidaMET= atoi (row[2]);
		numPreguntaPartidaSO= atoi (row[3]);
		numPreguntaPartidaCA1= atoi (row[4]);
		numPreguntaPartidaERM= atoi (row[5]);
		
		totalPreguntas = numPreguntaPartidaIX + numPreguntaPartidaAERO + numPreguntaPartidaMET +numPreguntaPartidaSO + numPreguntaPartidaCA1 + numPreguntaPartidaERM;
		
		PercentageIX = ((numPreguntaPartidaIX*100)/totalPreguntas);
		PercentageAERO = ((numPreguntaPartidaAERO*100)/totalPreguntas);
		PercentageMET = ((numPreguntaPartidaMET*100)/totalPreguntas);
		PercentageSO = ((numPreguntaPartidaSO*100)/totalPreguntas);
		PercentageCA1 = ((numPreguntaPartidaCA1*100)/totalPreguntas);
		PercentageERM = ((numPreguntaPartidaERM*100)/totalPreguntas);
		printf ("15a prueba\n");
		
		// ESTO EN VEZ DE SALIR EN PANTALLA LO TENEMOS QUE ENVIAR A L C# !!!!!!!!!!!!!!!!!
		printf("Percentage of IX questions:  %d %  \n",PercentageIX);
		printf("Percentage of AERO questions: %d % \n",PercentageAERO);
		printf("Percentage of MET questions : %d % \n",PercentageMET);		
		printf("Percentage of SO questions : %d % \n",PercentageSO);
		printf("Percentage of CA1 questions : %d % \n",PercentageCA1);
		printf("Percentage of ERM questions : %d % \n",PercentageERM);
		
		sprintf(answer, "3/Percentage of IX questions: %d \n Percentage of AERO questions: %d \n Percentage of MET questions : %d \n Percentage of SO questions : %d \n Percentage of CA1 questions : %d \n Percentage of ERM questions : %d \n ",PercentageIX, PercentageAERO, PercentageMET, PercentageSO, PercentageCA1 , PercentageERM);
		sprintf(answer2, "%d/%d/%d/%d/%d/%d",PercentageIX, PercentageAERO, PercentageMET, PercentageSO, PercentageCA1 , PercentageERM);
	}
	
	else if (row == NULL)
	{
		printf ("No se han obtenido datos en la consulta\n");
		sprintf(answer, "No se han obtenido datos en la consulta\n");
	}
	/*write (sock_conn,answer,strlen(answer));*/
	printf ("16a prueba\n");
	printf ("Answer: %s\n", answer);
	printf ("Answer2: %s\n", answer2);
	write (sock_conn,answer,strlen(answer));
	/*return "16/16/16/16/16/16";*/
	/*return "hola";*/
	/*	return answer2;*/
	/*printf ("17a prueba\n");*/
	
	
}
void PERCENTAGE_CORRECT_ANSWERS_PER_PERSON( char username[20],MYSQL *conn,int *sock_conn)
{
	// Estructura especial para almacenar resultados de consultas 
	MYSQL_RES *resultado;
	MYSQL_ROW row;
	int err;
	char answer[512];
	char consulta [512];
	// consulta SQL para obtener una tabla con todos los datos
	// de la base de datos
	err=mysql_query (conn, "SELECT * FROM Player");
	if (err!=0) {
		printf ("Error al consultar datos de la base %u %s\n",
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	//recogemos el resultado de la consulta. El resultado de la
	//consulta se devuelve en una variable del tipo puntero a
	//MYSQL_RES tal y como hemos declarado anteriormente.
	//Se trata de una tabla virtual en memoria que es la copia
	//de la tabla real en disco.
	resultado = mysql_store_result (conn);
	// El resultado es una estructura matricial en memoria
	// en la que cada fila contiene los datos de una persona.
	
	// Ahora obtenemos la primera fila que se almacena en una
	// variable de tipo MYSQL_ROW
	row = mysql_fetch_row (resultado);
	// En una fila hay tantas columnas como datos tiene una
	// persona. En nuestro caso hay tres columnas: nombre(row[0]),
	// nombre(row[1]) y edad (row[2]).
	
	//Ahora vamos a consultar la posicion que tiene un jugador,
	//cuyo nombre es dado por el usuario
	char id [20];
	strcpy(id, username);
	char answer2[512];
	printf ("10a prueba\n");
	strcpy (consulta,"SELECT numQuestionsIX, numQuestionsAERO, numQuestionsERM, numQuestionsCA1, numQuestionsSO, numQuestionsMET, numCorrectQuestionsIX, numCorrectQuestionsAERO, numCorrectQuestionsERM, numCorrectQuestionsCA1, numCorrectQuestionsSO, numCorrectQuestionsMET FROM Player WHERE username = '"); 
	strcat (consulta, id);
	strcat (consulta,"'");
	printf ("11a prueba\n");
	err=mysql_query (conn, consulta); 
	if (err!=0) {
		printf ("Error al consultar datos de la base %u %s\n",
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	
	//recogemos el resultado de la consulta 
	resultado = mysql_store_result (conn); 
	row = mysql_fetch_row (resultado);
	printf ("12a prueba\n");
	if (row == NULL)
		printf ("No se han obtenido datos en la consulta\n");
	else
	{
		int PIX = atoi (row[0]);
		int AIX = atoi (row[6]);
		
		int PAERO = atoi (row[1]);
		int AAERO = atoi (row[7]);
		
		int PERM = atoi (row[2]);
		int AERM = atoi (row[8]);
		
		int PCA1 = atoi (row[3]);
		int ACA1 = atoi (row[9]);
		
		int PSO = atoi (row[4]);
		int ASO = atoi (row[10]);
		
		int PMET = atoi (row[5]);
		int AMET = atoi (row[11]);
		int Percent_IX_Player =(AIX*100)/PIX;
		int Percent_AERO_Player= (AAERO*100)/PAERO;
		int Percent_ERM_Player = (AERM*100)/PERM;
		int Percent_CA1_Player = (ACA1*100)/PCA1;
		int Percent_SO_Player = (ASO*100)/PSO;
		int Percent_MET_Player = (AMET*100)/PMET;
		
		printf ("13a prueba\n");
		sprintf(answer2, "4/Percentage of correct IX questions: %d \n Percentage of correct AERO questions: %d \n Percentage of correct MET questions : %d \n Percentage of correct SO questions : %d \n Percentage of correct CA1 questions : %d \n Percentage of correct ERM questions : %d \n ",Percent_IX_Player, Percent_AERO_Player, Percent_MET_Player, Percent_SO_Player, Percent_CA1_Player , Percent_ERM_Player);
		printf ("El porcentaje de aciertos de IX es %d\n", (AIX*100)/PIX);
		printf ("El porcentaje de aciertos de AERO es %d\n", (AAERO*100)/PAERO);
		printf ("El porcentaje de aciertos de ERM es %d\n", (AERM*100)/PERM);
		printf ("El porcentaje de aciertos de CA1 es %d\n", (ACA1*100)/PCA1);
		printf ("El porcentaje de aciertos de SO es %d\n", (ASO*100)/PSO);
		printf ("El porcentaje de aciertos de MET es %d\n", (AMET*100)/PMET);/*(AIX*100)/PIX,(AAERO*100)/PAERO),(AERM*100)/PERM),(ACA1*100)/PCA1),(ASO*100)/PSO),(AMET*100)/PMET)*/
		//sprintf("El porcentaje de aciertos de IX es %d\n El porcentaje de aciertos de AERO es %d\n El porcentaje de aciertos de ERM es %d\n El porcentaje de aciertos de CA1 es %d\n El porcentaje de aciertos de SO es %d\n El porcentaje de aciertos de MET es %d\n",
	}
	printf ("14a prueba\n");
	write (sock_conn,answer2,strlen(answer2));
}
void TELL_ME_THE_RANKING(char idGame[20] ,MYSQL *conn, int *sock_conn)
{
	MYSQL_RES *resultado;
	MYSQL_ROW row;
	int err;
	
	char id [20];
	char consulta [200];
	strcpy(id,idGame);
	
	strcpy(consulta,"SELECT winner, 2ndplace, 3rdplace FROM Game WHERE id= '");
	strcat (consulta, id);
	strcat (consulta,"';");
	char answer3[512];
	err=mysql_query (conn, consulta); 
	if (err!=0) {
		printf ("Error al consultar datos de la base %u %s\n",
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	
	resultado = mysql_store_result (conn); 
	row = mysql_fetch_row (resultado);
	if (row == NULL)
	{
		printf ("No se han obtenido datos en la consulta\n");
		sprintf(answer3, "No se han obtenido datos en la consulta\n");
	}
	
	else
	{
		printf ("Primer puesto: %s\n Segundo Puesto: %s\n Tercer Puesto: %s\n", row[0], row [1], row [2]);
		
		sprintf(answer3, "5/Primer puesto: %s\n Segundo Puesto: %s\n Tercer Puesto: %s\n", row[0], row [1], row [2]);
	}
	write (sock_conn,answer3,strlen(answer3));
	
}





int DameSocket (TListaConectados *lista, char nombre[20])//Retorna el socket del jugador de la lista con el nombre que se le entra
{
	//Retorna el socket del jugador de la lista con el nombre que se le entra
	int encontrado=0;
	int i =0;
	while ((i<lista->num)&&(!encontrado))
	{
		if (strcmp(lista->conectados[i].nombre,nombre)==0)
		{
			encontrado=1;
		}
		else
			i=i+1;
	}
	if(encontrado)
	{
		return lista->conectados[i].socket;
	}
	else
	   return -1;
}

int DameUsuario (TListaConectados *lista, int socket, char nombre [20]) //Retorna el nombre del jugador de la lista con el socket que se le entra
{
	
	int encontrado=0;
	int i =0;
	printf ("socket DameUsuario: %d\n",socket);
	while ((i<lista->num)&&(!encontrado))
	{
		if (lista->conectados[i].socket==socket)
		{
			encontrado=1;
		}
		else
			i=i+1;
	}
	if(encontrado)
	{
		strcpy(nombre, lista->conectados[i].nombre);
		return 1;
	}
	else
	   return -1;
}

int DamePos(TListaConectados *lista, char nombre[20]) //RETORNA LA POSICION EN LA LISTA DE CONECTADOS DEL NOMBRE QUE SE LE ENTRA
{
	int encontrado=0;
	int i=0;
	
	while ((i<lista->num)&&(!encontrado))
	{
		if (strcmp(lista->conectados[i].nombre,nombre)==0)
		{
			encontrado=1;
		}
		else
			i=i+1;
	}
	if(encontrado)
	{
		return i;
	}
	else 
	   return -1;
}

int EliminarConectado (TListaConectados *lista, char nombre[20]) // ELIMINA UN VALOR DE LA LISTA DE CONECTADOS
{
	
	int encontrado=0;
	int pos= DamePos( lista, nombre);
	printf("%d",pos);
	
	if (pos==-1)
	{
		return -1;
	}
	
	else
	{
		int i=pos;
		while (i<lista->num-1)
		{
			strcpy(lista->conectados[i].nombre,lista->conectados[i+1].nombre);
			lista->conectados[i].socket = lista->conectados[i+1].socket;
			
			i=i+1;
		}
		
		lista->num = lista->num -1;
		return 0;
	}
	
}

void PonConectado ( TListaConectados *lista, char nombre [20], int socket)//INSERTA UN VALOR EN LA LISTA DE CONECTADOS
{
	if (lista->num==100)
	{
		return 0;
	}
	else
	{
		lista->conectados[lista->num].socket = socket;
		strcpy(lista->conectados[lista->num].nombre,nombre);
		
		printf("ANADIMOS CONECTADOS");
		printf("%s\n", lista->conectados[lista->num].nombre);
		lista->num=lista->num +1;
		printf("socket2: %d\n",socket);
		return 1;
	}
}
void DameConectados(TListaConectados *lista, char jugadoresConectados[200]) //RELLENA LA LISTA DE CONECTADOS
{	
	sprintf(jugadoresConectados,"%d/",lista->num);
	
	for(int i=0;i<lista->num;i++)
	{
		sprintf(jugadoresConectados,"%s/%s",jugadoresConectados,lista->conectados[i].nombre);
		printf("lista: %s\n", lista->conectados[i].nombre);
	}
	
	printf("JUGADORES CONECTADOS: %s\n",jugadoresConectados);
	
}

void Enviar(TListaConectados *lista ,char jugadoresConectados[200]) //ENVIA EL STRING CON LOS CONECTADOS AL C#
{
	int i;
	
	
	sprintf(jugadoresConectados,"6/%d/",listaconectados.num);
	
	for (i=0; i<lista->num; i++)
	{
		sprintf(jugadoresConectados,"%s%s/",jugadoresConectados,lista->conectados[i].nombre);
		printf("lista nombre: %s\n", lista->conectados[i].nombre);
		printf("lista socket: %d\n", lista->conectados[i].socket);
	}
	
	
	for (i=0; i<lista->num; i++)
	{

		write(lista->conectados[i].socket, jugadoresConectados, strlen(jugadoresConectados));
	}
	
	printf("%s",jugadoresConectados);
}

void *AtenderCliente(void *socket)
{
	int sock_conn;
	int *s;
	s= (int *) socket;
	sock_conn= *s;
	
	char username[20];
	char name[20];
	char surname[20];
	char email[20];
	char password[20];
	
	
	MYSQL *conn;
	int err;
	// Estructura especial para almacenar resultados de consultas 
	MYSQL_RES *resultado;
	MYSQL_ROW row;
	//Creamos una conexion al servidor MYSQL 
	conn = mysql_init(NULL);
	if (conn==NULL) {
		printf ("Error al crear la conexion: %u %s\n", 
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	//inicializar la conexion
	conn = mysql_real_connect (conn, "localhost","root", "mysql", "BBDDquiz",0, NULL, 0);
	if (conn==NULL) {
		printf ("Error al inicializar la conexion: %u %s\n", 
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	
	char peticion[512];
	char respuesta[512];
	int ret;
	// INICIALITZACIONS
	// Obrim el socket
	
	int i;
	// Bucle infinito
	char *p;
	int codigo;
	int terminar =0;
	for (;;)
	{
		/*printf ("Listening\n");*/
		
		// Entramos en un bucle para atender todas las peticiones de este cliente
		//hasta que se desconecte
		
		while (terminar ==0)
		{
			printf ("Listening\n");
			// Ahora recibimos la peticion
			ret=read(sock_conn,peticion, sizeof(peticion));
			printf ("Recibido\n");
			
			// Tenemos que anadirle la marca de fin de string 
			// para que no escriba lo que hay despues en el buffer
			peticion[ret]='\0';
			
			printf ("Peticion: %s\n",peticion);
			printf ("1a prueba\n");
			// vamos a ver que quieren
			p = strtok( peticion, "/");
			printf ("2a prueba\n");
			/*printf("el p: %d",p);*/
			codigo =  atoi (p);
			printf ("3a prueba\n");
			printf ("cod: %d\n",codigo);
			// Ya tenemos el codigo de la peticion
			printf ("4a prueba\n");
			
			if (codigo ==0) //ELIMINAR JUGADOR
			{
				printf("peto0\n");
				terminar=1;
				
				//peticion de desconexion
				char lconectados[500];
				char nombre[20];
				printf("peto01\n");
				int a = DameUsuario(&listaconectados, sock_conn, nombre);
				printf("peto02\n");
				if (a  ==1)
				{
					printf("peto1");
					pthread_mutex_lock(&mutex);
					EliminarConectado(&listaconectados,nombre);
					/*					pthread_mutex_unlock(&mutex);*/
					printf("peto2");
					//ENVIAMOS LA LISTA DE CONECTADOS
					char jugadoresConectados[200];
					char notificacion[200];
					
					DameConectados(&listaconectados,jugadoresConectados);
					
					printf("JUGADORES CONECTADOS vacio: %s\n",jugadoresConectados);
					
					
					sprintf(jugadoresConectados,"6/%d/",listaconectados.num);
					
					/*					pthread_mutex_lock(&mutex);*/
					Enviar(&listaconectados, jugadoresConectados);
					
					pthread_mutex_unlock(&mutex);
				}
				else
				{
					printf("ERROR BUSCANDO USUARIO A PARTIR DEL SOCKET");
				}
				
			}
			else if (codigo == 1) // PARA EL SIGN IN
			{
				char username[20];
				char name[20];
				char surname[20];
				char email[20];
				char password[20];
				
				p = strtok( NULL, "/");
				strcpy (username, p);
				p = strtok( NULL, "/");
				strcpy (name, p);
				p = strtok( NULL, "/");
				strcpy (surname, p);
				p = strtok( NULL, "/");
				strcpy (email, p);
				p = strtok( NULL, "/");
				strcpy (password, p);
				
				printf ("Codigo: %d\n Usename: %s\n Name: %s\n Surname: %s\n Email: %s\n Password: %s\n",codigo, username, name, surname, email, password);
				
				pthread_mutex_lock(&mutex);
				SignIn(username, name, surname, email, password, conn);
				pthread_mutex_unlock(&mutex);
				
			}
			
			else if (codigo == 2) // PARA EL LOG IN
			{
				
				printf("%d",sock_conn);
				char username[20];
				char password[20];
				
				p = strtok( NULL, "/");
				strcpy (username, p);
				p = strtok( NULL, "/");
				strcpy (password, p);
				
				int a = LogIn(username, password, conn );
				
				printf("socket: %d\n",sock_conn);
				if (a==1)
				{
					printf ("Codigo: %d\n Usename: %s\n Password: %s\n",codigo, username, password);
					sprintf(respuesta,"%d/%s",a,username);
					
					pthread_mutex_lock(&mutex);
					write (sock_conn,respuesta,strlen(respuesta));
					pthread_mutex_unlock(&mutex);
					
					// A￑ADIMOS el usuario a la lista de conectados
					pthread_mutex_lock(&mutex);
					printf("socket: %d\n",sock_conn);
					PonConectado(&listaconectados, username, sock_conn);
					/*					listaconectados.conectados[listaconectados.num-1].socket = sock_conn;*/
					printf("socket: %d\n",sock_conn);
					pthread_mutex_unlock(&mutex);
					
					//ENVIAMOS LA LISTA DE CONECTADOS
					char jugadoresConectados[200];	
					printf("JUGADORES CONECTADOS vacio: %s\n",jugadoresConectados);
					
										
					pthread_mutex_lock(&mutex);
					
					Enviar(&listaconectados, jugadoresConectados);
					
					
					pthread_mutex_unlock(&mutex);
				}
				else if (a==0)
				{
					printf ("No se ha podido encontrar al usuario");
				}
			}
			
			else if (codigo == 3 ) // PARA CONSULTA 1
			{	
				
				printf ("5a prueba\n");
				
				char idGame[20];
				p = strtok( NULL, "/");
				strcpy (idGame, p);
				printf ("6a prueba\n");
				int iidGame = atoi(idGame);
				printf ("%d\n",iidGame);
				
				char * consulta1;
				printf ("7a prueba\n");
				/*consulta1 = PORCENTAJE_PREGUNTAS_PARTIDAS(iidGame, conn);*/
				printf ("18a prueba\n");
				
				pthread_mutex_lock(&mutex);
				PORCENTAJE_PREGUNTAS_PARTIDAS(iidGame, conn,sock_conn);
				pthread_mutex_unlock(&mutex);
				
				
				printf ("19a prueba\n");
				
				
			}
			else if (codigo == 4) // PARA CONSULTA 2
			{
				
				char username[20];
				p = strtok(NULL,"/");
				strcpy (username,p);
				pthread_mutex_lock(&mutex);
				PERCENTAGE_CORRECT_ANSWERS_PER_PERSON(username, conn, sock_conn);
				pthread_mutex_unlock(&mutex);
			}
			else if (codigo == 5) // PARA CONSULTA 3
			{
				p = strtok(NULL,"/");
				strcpy (username,p);
				char idGame[20];
				pthread_mutex_lock(&mutex);
				TELL_ME_THE_RANKING(idGame, conn, sock_conn);
				pthread_mutex_unlock(&mutex);
			}
		}
		
	}
	close(sock_conn); 
}


int main(int argc, char *argv[])
{
	//pthread_mutex_t accesoexcluyente;
	
	int sock_conn, sock_listen;
	struct sockaddr_in serv_adr;
	
	// INICIALITZACIONS
	// Obrim el socket
	if ((sock_listen = socket(AF_INET, SOCK_STREAM, 0)) < 0)
		printf("Error creant socket");
	// Fem el bind al port
	
	
	memset(&serv_adr, 0, sizeof(serv_adr));// inicialitza a zero serv_addr
	serv_adr.sin_family = AF_INET;
	
	// asocia el socket a cualquiera de las IP de la m?quina. 
	//htonl formatea el numero que recibe al formato necesario
	serv_adr.sin_addr.s_addr = htonl(INADDR_ANY);
	// establecemos el puerto de escucha
	serv_adr.sin_port = htons(9200);
	if (bind(sock_listen, (struct sockaddr *) &serv_adr, sizeof(serv_adr)) < 0)
		printf ("Error al bind");
	
	if (listen(sock_listen, 3) < 0)
		printf("Error en el Listen");
	
	int i;
	int sockets[100];
	pthread_t thread;
	i=0;
	
	// Bucle para atender a  clientes
	for (;;){
		printf ("Escuchando\n");
		
		sock_conn = accept(sock_listen, NULL, NULL);
		printf ("He recibido conexion\n");
		
		sockets[i] =sock_conn;
		//sock_conn es el socket que usaremos para este cliente
		
		// Crear thead y decirle lo que tiene que hacer
		pthread_create (&thread, NULL, AtenderCliente, &sockets[i]);
		i=i+1;
		
	}
	
	/*	for (i=0; i<100; i++)*/
	/*		pthread_join (thread[i], NULL);*/
	
}







